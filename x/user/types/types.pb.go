// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/user/types/types.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Post struct {
	VendorID        uint32                                        `protobuf:"varint,1,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id" yaml:"vendor_id"`
	PostIDHash      []byte                                        `protobuf:"bytes,2,opt,name=post_id_hash,json=postIdHash,proto3" json:"post_id_hash" yaml:"post_id_hash"`
	Creator         github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty" yaml:"creator"`
	RewardAccount   github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=reward_account,json=rewardAccount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"reward_account,omitempty" yaml:"reward_account"`
	BodyHash        []byte                                        `protobuf:"bytes,5,opt,name=body_hash,json=bodyHash,proto3" json:"body_hash,omitempty" yaml:"body_hash"`
	Deposit         types.Coin                                    `protobuf:"bytes,6,opt,name=deposit,proto3" json:"deposit"`
	userEndTime time.Time                                     `protobuf:"bytes,7,opt,name=user_end_time,json=userEndTime,proto3,stdtime" json:"user_end_time" yaml:"user_end_time"`
}

func (m *Post) Reset()         { *m = Post{} }
func (m *Post) String() string { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()    {}
func (*Post) Descriptor() ([]byte, []int) {
	return fileDescriptor_be1153887b93a067, []int{0}
}
func (m *Post) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Post) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Post.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Post) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Post.Merge(m, src)
}
func (m *Post) XXX_Size() int {
	return m.Size()
}
func (m *Post) XXX_DiscardUnknown() {
	xxx_messageInfo_Post.DiscardUnknown(m)
}

var xxx_messageInfo_Post proto.InternalMessageInfo

func (m *Post) GetVendorID() uint32 {
	if m != nil {
		return m.VendorID
	}
	return 0
}

func (m *Post) GetPostIDHash() []byte {
	if m != nil {
		return m.PostIDHash
	}
	return nil
}

func (m *Post) GetCreator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *Post) GetRewardAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.RewardAccount
	}
	return nil
}

func (m *Post) GetBodyHash() []byte {
	if m != nil {
		return m.BodyHash
	}
	return nil
}

func (m *Post) GetDeposit() types.Coin {
	if m != nil {
		return m.Deposit
	}
	return types.Coin{}
}

func (m *Post) GetuserEndTime() time.Time {
	if m != nil {
		return m.userEndTime
	}
	return time.Time{}
}

type Upvote struct {
	Curator       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=curator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"curator,omitempty" yaml:"curator"`
	RewardAccount github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=reward_account,json=rewardAccount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"reward_account,omitempty" yaml:"reward_account"`
	VoteAmount    types.Coin                                    `protobuf:"bytes,3,opt,name=vote_amount,json=voteAmount,proto3" json:"vote_amount"`
	Deposit       types.Coin                                    `protobuf:"bytes,4,opt,name=deposit,proto3" json:"deposit"`
	CuratedTime   time.Time                                     `protobuf:"bytes,5,opt,name=curated_time,json=curatedTime,proto3,stdtime" json:"curated_time" yaml:"curated_time"`
}

func (m *Upvote) Reset()         { *m = Upvote{} }
func (m *Upvote) String() string { return proto.CompactTextString(m) }
func (*Upvote) ProtoMessage()    {}
func (*Upvote) Descriptor() ([]byte, []int) {
	return fileDescriptor_be1153887b93a067, []int{1}
}
func (m *Upvote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Upvote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Upvote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Upvote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Upvote.Merge(m, src)
}
func (m *Upvote) XXX_Size() int {
	return m.Size()
}
func (m *Upvote) XXX_DiscardUnknown() {
	xxx_messageInfo_Upvote.DiscardUnknown(m)
}

var xxx_messageInfo_Upvote proto.InternalMessageInfo

func (m *Upvote) GetCurator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Curator
	}
	return nil
}

func (m *Upvote) GetRewardAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.RewardAccount
	}
	return nil
}

func (m *Upvote) GetVoteAmount() types.Coin {
	if m != nil {
		return m.VoteAmount
	}
	return types.Coin{}
}

func (m *Upvote) GetDeposit() types.Coin {
	if m != nil {
		return m.Deposit
	}
	return types.Coin{}
}

func (m *Upvote) GetCuratedTime() time.Time {
	if m != nil {
		return m.CuratedTime
	}
	return time.Time{}
}

type MsgPost struct {
	VendorID      uint32                                        `protobuf:"varint,1,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id" yaml:"vendor_id"`
	PostID        string                                        `protobuf:"bytes,2,opt,name=post_id,json=postId,proto3" json:"post_id" yaml:"post_id"`
	Creator       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty" yaml:"creator"`
	RewardAccount github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=reward_account,json=rewardAccount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"reward_account,omitempty" yaml:"reward_account"`
	Body          string                                        `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty" yaml:"body"`
}

func (m *MsgPost) Reset()         { *m = MsgPost{} }
func (m *MsgPost) String() string { return proto.CompactTextString(m) }
func (*MsgPost) ProtoMessage()    {}
func (*MsgPost) Descriptor() ([]byte, []int) {
	return fileDescriptor_be1153887b93a067, []int{2}
}
func (m *MsgPost) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPost.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPost.Merge(m, src)
}
func (m *MsgPost) XXX_Size() int {
	return m.Size()
}
func (m *MsgPost) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPost.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPost proto.InternalMessageInfo

func (m *MsgPost) GetVendorID() uint32 {
	if m != nil {
		return m.VendorID
	}
	return 0
}

func (m *MsgPost) GetPostID() string {
	if m != nil {
		return m.PostID
	}
	return ""
}

func (m *MsgPost) GetCreator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *MsgPost) GetRewardAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.RewardAccount
	}
	return nil
}

func (m *MsgPost) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type MsgUpvote struct {
	VendorID      uint32                                        `protobuf:"varint,1,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id" yaml:"vendor_id"`
	PostID        string                                        `protobuf:"bytes,2,opt,name=post_id,json=postId,proto3" json:"post_id" yaml:"post_id"`
	Curator       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=curator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"curator,omitempty" yaml:"curator"`
	RewardAccount github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=reward_account,json=rewardAccount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"reward_account,omitempty" yaml:"reward_account"`
	VoteNum       int32                                         `protobuf:"varint,5,opt,name=vote_num,json=voteNum,proto3" json:"vote_num,omitempty"`
}

func (m *MsgUpvote) Reset()         { *m = MsgUpvote{} }
func (m *MsgUpvote) String() string { return proto.CompactTextString(m) }
func (*MsgUpvote) ProtoMessage()    {}
func (*MsgUpvote) Descriptor() ([]byte, []int) {
	return fileDescriptor_be1153887b93a067, []int{3}
}
func (m *MsgUpvote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpvote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpvote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpvote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpvote.Merge(m, src)
}
func (m *MsgUpvote) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpvote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpvote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpvote proto.InternalMessageInfo

func (m *MsgUpvote) GetVendorID() uint32 {
	if m != nil {
		return m.VendorID
	}
	return 0
}

func (m *MsgUpvote) GetPostID() string {
	if m != nil {
		return m.PostID
	}
	return ""
}

func (m *MsgUpvote) GetCurator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Curator
	}
	return nil
}

func (m *MsgUpvote) GetRewardAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.RewardAccount
	}
	return nil
}

func (m *MsgUpvote) GetVoteNum() int32 {
	if m != nil {
		return m.VoteNum
	}
	return 0
}

type MsgModerate struct {
	VendorID      uint32                                        `protobuf:"varint,1,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id" yaml:"vendor_id"`
	PostID        string                                        `protobuf:"bytes,2,opt,name=post_id,json=postId,proto3" json:"post_id" yaml:"post_id"`
	Moderator     github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=moderator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"moderator,omitempty" yaml:"moderator"`
	RewardAccount github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=reward_account,json=rewardAccount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"reward_account,omitempty" yaml:"reward_account"`
}

func (m *MsgModerate) Reset()         { *m = MsgModerate{} }
func (m *MsgModerate) String() string { return proto.CompactTextString(m) }
func (*MsgModerate) ProtoMessage()    {}
func (*MsgModerate) Descriptor() ([]byte, []int) {
	return fileDescriptor_be1153887b93a067, []int{4}
}
func (m *MsgModerate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgModerate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgModerate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgModerate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgModerate.Merge(m, src)
}
func (m *MsgModerate) XXX_Size() int {
	return m.Size()
}
func (m *MsgModerate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgModerate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgModerate proto.InternalMessageInfo

func (m *MsgModerate) GetVendorID() uint32 {
	if m != nil {
		return m.VendorID
	}
	return 0
}

func (m *MsgModerate) GetPostID() string {
	if m != nil {
		return m.PostID
	}
	return ""
}

func (m *MsgModerate) GetModerator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Moderator
	}
	return nil
}

func (m *MsgModerate) GetRewardAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.RewardAccount
	}
	return nil
}

// VPPair is struct that just has a vendor_id, post_id pair with no other data.
// It is intended to be used as a marshalable pointer. For example, a VPPair can
// be used to construct the key to getting an Upvote from state.
type VPPair struct {
	VendorID   uint32 `protobuf:"varint,1,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id" yaml:"vendor_id"`
	PostIDHash []byte `protobuf:"bytes,2,opt,name=post_id_hash,json=postIdHash,proto3" json:"post_id_hash" yaml:"post_id_hash"`
}

func (m *VPPair) Reset()         { *m = VPPair{} }
func (m *VPPair) String() string { return proto.CompactTextString(m) }
func (*VPPair) ProtoMessage()    {}
func (*VPPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_be1153887b93a067, []int{5}
}
func (m *VPPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VPPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VPPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VPPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPPair.Merge(m, src)
}
func (m *VPPair) XXX_Size() int {
	return m.Size()
}
func (m *VPPair) XXX_DiscardUnknown() {
	xxx_messageInfo_VPPair.DiscardUnknown(m)
}

var xxx_messageInfo_VPPair proto.InternalMessageInfo

func (m *VPPair) GetVendorID() uint32 {
	if m != nil {
		return m.VendorID
	}
	return 0
}

func (m *VPPair) GetPostIDHash() []byte {
	if m != nil {
		return m.PostIDHash
	}
	return nil
}

// VPPairs defines an array of VPPair objects.
type VPPairs struct {
	Pairs []VPPair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs"`
}

func (m *VPPairs) Reset()         { *m = VPPairs{} }
func (m *VPPairs) String() string { return proto.CompactTextString(m) }
func (*VPPairs) ProtoMessage()    {}
func (*VPPairs) Descriptor() ([]byte, []int) {
	return fileDescriptor_be1153887b93a067, []int{6}
}
func (m *VPPairs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VPPairs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VPPairs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VPPairs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPPairs.Merge(m, src)
}
func (m *VPPairs) XXX_Size() int {
	return m.Size()
}
func (m *VPPairs) XXX_DiscardUnknown() {
	xxx_messageInfo_VPPairs.DiscardUnknown(m)
}

var xxx_messageInfo_VPPairs proto.InternalMessageInfo

func (m *VPPairs) GetPairs() []VPPair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

func init() {
	proto.RegisterType((*Post)(nil), "public_awesome.stakebird.x.user.v1.Post")
	proto.RegisterType((*Upvote)(nil), "public_awesome.stakebird.x.user.v1.Upvote")
	proto.RegisterType((*MsgPost)(nil), "public_awesome.stakebird.x.user.v1.MsgPost")
	proto.RegisterType((*MsgUpvote)(nil), "public_awesome.stakebird.x.user.v1.MsgUpvote")
	proto.RegisterType((*MsgModerate)(nil), "public_awesome.stakebird.x.user.v1.MsgModerate")
	proto.RegisterType((*VPPair)(nil), "public_awesome.stakebird.x.user.v1.VPPair")
	proto.RegisterType((*VPPairs)(nil), "public_awesome.stakebird.x.user.v1.VPPairs")
}

func init() { proto.RegisterFile("x/user/types/types.proto", fileDescriptor_be1153887b93a067) }

var fileDescriptor_be1153887b93a067 = []byte{
	// 804 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0x4d, 0x4f, 0xdb, 0x48,
	0x18, 0x8e, 0xc9, 0xf7, 0x84, 0x8f, 0x5d, 0xb3, 0x2b, 0x79, 0xa3, 0x55, 0x26, 0xf2, 0xae, 0xd8,
	0x5c, 0xe2, 0x08, 0xd8, 0xbd, 0xe4, 0xb4, 0x09, 0x20, 0x6d, 0x90, 0x82, 0x90, 0xb5, 0x50, 0xa9,
	0x52, 0x6b, 0x39, 0x9e, 0xa9, 0x63, 0x11, 0x7b, 0x5c, 0x8f, 0x13, 0xe0, 0x3f, 0xf4, 0xc0, 0xa1,
	0x87, 0x1e, 0xb9, 0xf7, 0x07, 0xf4, 0x2f, 0x70, 0x44, 0xea, 0xa5, 0x27, 0xb7, 0x0a, 0x97, 0x8a,
	0x63, 0x6e, 0xed, 0xa9, 0xf2, 0x8c, 0x9d, 0x0f, 0x54, 0x09, 0x84, 0x4a, 0x4b, 0x7b, 0xb1, 0x66,
	0xde, 0xaf, 0x67, 0xfc, 0x3c, 0xef, 0x6b, 0x0f, 0xf8, 0xfd, 0xa8, 0x66, 0xf4, 0x3d, 0xdd, 0xb7,
	0x1c, 0xb3, 0xe6, 0x1f, 0xbb, 0x98, 0xf2, 0xa7, 0xe2, 0x7a, 0xc4, 0x27, 0xe2, 0x8a, 0xdb, 0xef,
	0xf4, 0x2c, 0x43, 0xd3, 0x0f, 0x31, 0x25, 0x36, 0x56, 0xa8, 0xaf, 0x1f, 0xe0, 0x8e, 0xe5, 0x21,
	0xe5, 0x48, 0x89, 0xd3, 0x94, 0xc1, 0x6a, 0x51, 0x36, 0x88, 0xe3, 0x7b, 0x56, 0xa7, 0xc6, 0xd2,
	0x6a, 0x26, 0x31, 0xc9, 0x64, 0xc5, 0x6b, 0x15, 0x57, 0x66, 0x63, 0x0c, 0x42, 0x6d, 0x42, 0xab,
	0x7c, 0x33, 0x85, 0x59, 0x84, 0x26, 0x21, 0x66, 0x0f, 0xf3, 0xb0, 0x4e, 0xff, 0x49, 0xcd, 0xb7,
	0x6c, 0x4c, 0x7d, 0xdd, 0x76, 0x79, 0x80, 0xfc, 0x3a, 0x05, 0x52, 0xbb, 0x84, 0xfa, 0xe2, 0x36,
	0xc8, 0x0f, 0xb0, 0x83, 0x88, 0xa7, 0x59, 0x48, 0x12, 0xca, 0x42, 0x65, 0xa1, 0x59, 0x1d, 0x06,
	0x30, 0xb7, 0xcf, 0x8c, 0xad, 0xcd, 0xcb, 0x00, 0x4e, 0x02, 0x46, 0x01, 0xfc, 0xe9, 0x58, 0xb7,
	0x7b, 0x75, 0x79, 0x6c, 0x92, 0xd5, 0x1c, 0x5f, 0xb7, 0x90, 0xf8, 0x00, 0xcc, 0xbb, 0x84, 0xfa,
	0x9a, 0x85, 0xb4, 0xae, 0x4e, 0xbb, 0xd2, 0x5c, 0x59, 0xa8, 0xcc, 0x37, 0xff, 0x19, 0x06, 0x10,
	0x84, 0x58, 0xad, 0xcd, 0xff, 0x74, 0xda, 0xbd, 0x0c, 0xe0, 0x4c, 0xd4, 0x28, 0x80, 0xcb, 0xbc,
	0xe6, 0xb4, 0x55, 0x56, 0x41, 0xb8, 0x6d, 0xa1, 0x30, 0x45, 0x7c, 0x04, 0xb2, 0x86, 0x87, 0x75,
	0x9f, 0x78, 0x52, 0x92, 0xd5, 0xdc, 0x18, 0x05, 0x70, 0x91, 0x67, 0x45, 0x0e, 0xf9, 0x63, 0x00,
	0xab, 0xa6, 0xe5, 0x77, 0xfb, 0x1d, 0xc5, 0x20, 0x76, 0x44, 0x4d, 0xcc, 0x10, 0x45, 0x07, 0x11,
	0x3f, 0x0d, 0xc3, 0x68, 0x20, 0xe4, 0x61, 0x4a, 0xd5, 0xb8, 0xa6, 0xf8, 0x14, 0x2c, 0x7a, 0xf8,
	0x50, 0xf7, 0x90, 0xa6, 0x1b, 0x06, 0xe9, 0x3b, 0xbe, 0x94, 0x62, 0x28, 0xdb, 0xa3, 0x00, 0xfe,
	0xca, 0x51, 0x66, 0xfd, 0xb7, 0x00, 0x5b, 0xe0, 0x15, 0x1a, 0xbc, 0x80, 0xb8, 0x0a, 0xf2, 0x1d,
	0x82, 0x8e, 0x39, 0x4f, 0x69, 0x86, 0xf6, 0xcb, 0x84, 0xdd, 0xb1, 0x4b, 0x56, 0x73, 0xe1, 0x9a,
	0x91, 0xb0, 0x0e, 0xb2, 0x08, 0xbb, 0x84, 0x5a, 0xbe, 0x94, 0x29, 0x0b, 0x95, 0xc2, 0xda, 0xb2,
	0xc2, 0x01, 0x35, 0x8a, 0x0e, 0x94, 0xc1, 0xaa, 0xb2, 0x41, 0x2c, 0xa7, 0x99, 0x3a, 0x0b, 0x60,
	0x42, 0x8d, 0x23, 0xc5, 0x1e, 0xf8, 0x39, 0xee, 0x31, 0x0d, 0x3b, 0x48, 0x0b, 0xfb, 0x40, 0xca,
	0xb2, 0xf4, 0xa2, 0xc2, 0x9b, 0x44, 0x89, 0x9b, 0x44, 0xf9, 0x3f, 0x6e, 0x92, 0xe6, 0x9f, 0x61,
	0x95, 0x51, 0x00, 0xa5, 0x88, 0xe3, 0xab, 0x25, 0xe4, 0x93, 0xb7, 0x50, 0x50, 0x97, 0x62, 0xfb,
	0x96, 0x83, 0xc2, 0x5c, 0xf9, 0x65, 0x12, 0x64, 0xf6, 0xdc, 0x01, 0xf1, 0x31, 0x93, 0x2c, 0xf4,
	0x12, 0x8f, 0x75, 0xd5, 0xac, 0x64, 0xdc, 0x71, 0x2b, 0xc9, 0x78, 0xea, 0x67, 0x24, 0x9b, 0xbb,
	0x6b, 0xc9, 0xea, 0xa0, 0x10, 0xbe, 0x99, 0xa6, 0xdb, 0x0c, 0x2f, 0x79, 0x9d, 0x06, 0x20, 0x8c,
	0x6e, 0xb0, 0xe0, 0x69, 0xed, 0x52, 0x37, 0xd6, 0xee, 0x31, 0x98, 0x67, 0xaf, 0x8b, 0x23, 0xd9,
	0xd2, 0xd7, 0xca, 0x06, 0x23, 0xd9, 0x96, 0xa7, 0x78, 0xc6, 0xd3, 0x8a, 0x15, 0x22, 0x13, 0x53,
	0xeb, 0x79, 0x12, 0x64, 0xdb, 0xd4, 0xfc, 0xe2, 0x9f, 0x81, 0x7f, 0x41, 0x36, 0x1a, 0x65, 0x26,
	0x4a, 0xbe, 0xf9, 0xd7, 0x30, 0x80, 0x19, 0xfe, 0x05, 0xb8, 0x0c, 0x60, 0xec, 0x9c, 0xf4, 0x43,
	0x64, 0x90, 0xd5, 0x0c, 0x9f, 0xf9, 0x1f, 0x70, 0xde, 0xff, 0x00, 0xa9, 0x70, 0x90, 0x99, 0x86,
	0xf9, 0xe6, 0xd2, 0x28, 0x80, 0x85, 0xc9, 0xa8, 0xcb, 0x2a, 0x73, 0xd6, 0x53, 0xef, 0x4f, 0xa1,
	0x20, 0x3f, 0x4b, 0x82, 0x7c, 0x9b, 0x9a, 0xd1, 0x1c, 0xdd, 0x3f, 0x61, 0xa2, 0xa9, 0x4e, 0x7e,
	0x95, 0xa9, 0xbe, 0x73, 0x61, 0x7e, 0x03, 0x39, 0x36, 0xd5, 0x4e, 0xdf, 0x66, 0xe2, 0xa4, 0xd5,
	0x6c, 0xb8, 0xdf, 0xe9, 0xdb, 0x91, 0x1c, 0x1f, 0xe6, 0x40, 0xa1, 0x4d, 0xcd, 0x36, 0x41, 0x38,
	0x1c, 0x9d, 0x7b, 0x26, 0x88, 0x01, 0xf2, 0x36, 0x3f, 0xd9, 0x58, 0x92, 0xad, 0x09, 0xe8, 0xd8,
	0x75, 0x0b, 0x9e, 0x26, 0x75, 0xbf, 0x81, 0x2c, 0x11, 0xf7, 0xaf, 0x04, 0x90, 0xd9, 0xdf, 0xdd,
	0xd5, 0x2d, 0xef, 0xbb, 0xb8, 0xa7, 0xd4, 0x73, 0x2f, 0x4e, 0xa1, 0xc0, 0x4e, 0xbe, 0x07, 0xb2,
	0xfc, 0xe0, 0x54, 0xdc, 0x06, 0x69, 0x37, 0x5c, 0x48, 0x42, 0x39, 0x59, 0x29, 0xac, 0x29, 0xca,
	0xcd, 0xee, 0x83, 0x0a, 0xcf, 0x8f, 0x7e, 0x0a, 0xbc, 0x44, 0x73, 0xe7, 0x6c, 0x58, 0x12, 0xce,
	0x87, 0x25, 0xe1, 0xdd, 0xb0, 0x24, 0x9c, 0x5c, 0x94, 0x12, 0xe7, 0x17, 0xa5, 0xc4, 0x9b, 0x8b,
	0x52, 0xe2, 0xe1, 0xdf, 0x53, 0x74, 0x73, 0x80, 0x6a, 0x04, 0x50, 0x1b, 0x03, 0xd4, 0xae, 0xde,
	0x53, 0x3b, 0x19, 0xf6, 0x13, 0x59, 0xff, 0x14, 0x00, 0x00, 0xff, 0xff, 0xf2, 0xb9, 0xca, 0xfe,
	0xc2, 0x0a, 0x00, 0x00,
}

func (this *MsgPost) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgPost)
	if !ok {
		that2, ok := that.(MsgPost)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VendorID != that1.VendorID {
		return false
	}
	if this.PostID != that1.PostID {
		return false
	}
	if !bytes.Equal(this.Creator, that1.Creator) {
		return false
	}
	if !bytes.Equal(this.RewardAccount, that1.RewardAccount) {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	return true
}
func (this *MsgUpvote) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgUpvote)
	if !ok {
		that2, ok := that.(MsgUpvote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VendorID != that1.VendorID {
		return false
	}
	if this.PostID != that1.PostID {
		return false
	}
	if !bytes.Equal(this.Curator, that1.Curator) {
		return false
	}
	if !bytes.Equal(this.RewardAccount, that1.RewardAccount) {
		return false
	}
	if this.VoteNum != that1.VoteNum {
		return false
	}
	return true
}
func (this *MsgModerate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgModerate)
	if !ok {
		that2, ok := that.(MsgModerate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VendorID != that1.VendorID {
		return false
	}
	if this.PostID != that1.PostID {
		return false
	}
	if !bytes.Equal(this.Moderator, that1.Moderator) {
		return false
	}
	if !bytes.Equal(this.RewardAccount, that1.RewardAccount) {
		return false
	}
	return true
}
func (this *VPPair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VPPair)
	if !ok {
		that2, ok := that.(VPPair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VendorID != that1.VendorID {
		return false
	}
	if !bytes.Equal(this.PostIDHash, that1.PostIDHash) {
		return false
	}
	return true
}
func (m *Post) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Post) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Post) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.userEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.userEndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTypes(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.BodyHash) > 0 {
		i -= len(m.BodyHash)
		copy(dAtA[i:], m.BodyHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BodyHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RewardAccount) > 0 {
		i -= len(m.RewardAccount)
		copy(dAtA[i:], m.RewardAccount)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RewardAccount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PostIDHash) > 0 {
		i -= len(m.PostIDHash)
		copy(dAtA[i:], m.PostIDHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PostIDHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.VendorID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VendorID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Upvote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Upvote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Upvote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CuratedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CuratedTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintTypes(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.VoteAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.RewardAccount) > 0 {
		i -= len(m.RewardAccount)
		copy(dAtA[i:], m.RewardAccount)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RewardAccount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Curator) > 0 {
		i -= len(m.Curator)
		copy(dAtA[i:], m.Curator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Curator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPost) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPost) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPost) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RewardAccount) > 0 {
		i -= len(m.RewardAccount)
		copy(dAtA[i:], m.RewardAccount)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RewardAccount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PostID) > 0 {
		i -= len(m.PostID)
		copy(dAtA[i:], m.PostID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PostID)))
		i--
		dAtA[i] = 0x12
	}
	if m.VendorID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VendorID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpvote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpvote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpvote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VoteNum != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VoteNum))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RewardAccount) > 0 {
		i -= len(m.RewardAccount)
		copy(dAtA[i:], m.RewardAccount)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RewardAccount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Curator) > 0 {
		i -= len(m.Curator)
		copy(dAtA[i:], m.Curator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Curator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PostID) > 0 {
		i -= len(m.PostID)
		copy(dAtA[i:], m.PostID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PostID)))
		i--
		dAtA[i] = 0x12
	}
	if m.VendorID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VendorID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgModerate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgModerate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgModerate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardAccount) > 0 {
		i -= len(m.RewardAccount)
		copy(dAtA[i:], m.RewardAccount)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RewardAccount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Moderator) > 0 {
		i -= len(m.Moderator)
		copy(dAtA[i:], m.Moderator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Moderator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PostID) > 0 {
		i -= len(m.PostID)
		copy(dAtA[i:], m.PostID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PostID)))
		i--
		dAtA[i] = 0x12
	}
	if m.VendorID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VendorID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VPPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VPPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PostIDHash) > 0 {
		i -= len(m.PostIDHash)
		copy(dAtA[i:], m.PostIDHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PostIDHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.VendorID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VendorID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VPPairs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPPairs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VPPairs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for iNdEx := len(m.Pairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Post) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VendorID != 0 {
		n += 1 + sovTypes(uint64(m.VendorID))
	}
	l = len(m.PostIDHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RewardAccount)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BodyHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Deposit.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.userEndTime)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *Upvote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Curator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RewardAccount)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.VoteAmount.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Deposit.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CuratedTime)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *MsgPost) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VendorID != 0 {
		n += 1 + sovTypes(uint64(m.VendorID))
	}
	l = len(m.PostID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RewardAccount)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *MsgUpvote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VendorID != 0 {
		n += 1 + sovTypes(uint64(m.VendorID))
	}
	l = len(m.PostID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Curator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RewardAccount)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VoteNum != 0 {
		n += 1 + sovTypes(uint64(m.VoteNum))
	}
	return n
}

func (m *MsgModerate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VendorID != 0 {
		n += 1 + sovTypes(uint64(m.VendorID))
	}
	l = len(m.PostID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Moderator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RewardAccount)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *VPPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VendorID != 0 {
		n += 1 + sovTypes(uint64(m.VendorID))
	}
	l = len(m.PostIDHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *VPPairs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for _, e := range m.Pairs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Post) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Post: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Post: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorID", wireType)
			}
			m.VendorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VendorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostIDHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostIDHash = append(m.PostIDHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PostIDHash == nil {
				m.PostIDHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAccount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAccount = append(m.RewardAccount[:0], dAtA[iNdEx:postIndex]...)
			if m.RewardAccount == nil {
				m.RewardAccount = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BodyHash = append(m.BodyHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BodyHash == nil {
				m.BodyHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field userEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.userEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Upvote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Upvote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Upvote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curator = append(m.Curator[:0], dAtA[iNdEx:postIndex]...)
			if m.Curator == nil {
				m.Curator = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAccount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAccount = append(m.RewardAccount[:0], dAtA[iNdEx:postIndex]...)
			if m.RewardAccount == nil {
				m.RewardAccount = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VoteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CuratedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CuratedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPost) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPost: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPost: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorID", wireType)
			}
			m.VendorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VendorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAccount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAccount = append(m.RewardAccount[:0], dAtA[iNdEx:postIndex]...)
			if m.RewardAccount == nil {
				m.RewardAccount = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpvote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpvote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpvote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorID", wireType)
			}
			m.VendorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VendorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curator = append(m.Curator[:0], dAtA[iNdEx:postIndex]...)
			if m.Curator == nil {
				m.Curator = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAccount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAccount = append(m.RewardAccount[:0], dAtA[iNdEx:postIndex]...)
			if m.RewardAccount == nil {
				m.RewardAccount = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteNum", wireType)
			}
			m.VoteNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgModerate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgModerate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgModerate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorID", wireType)
			}
			m.VendorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VendorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moderator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moderator = append(m.Moderator[:0], dAtA[iNdEx:postIndex]...)
			if m.Moderator == nil {
				m.Moderator = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAccount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAccount = append(m.RewardAccount[:0], dAtA[iNdEx:postIndex]...)
			if m.RewardAccount == nil {
				m.RewardAccount = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorID", wireType)
			}
			m.VendorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VendorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostIDHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostIDHash = append(m.PostIDHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PostIDHash == nil {
				m.PostIDHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPPairs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPPairs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPPairs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pairs = append(m.Pairs, VPPair{})
			if err := m.Pairs[len(m.Pairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
