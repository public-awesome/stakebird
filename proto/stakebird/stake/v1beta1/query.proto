syntax = "proto3";
package stakebird.stake.v1beta1;

import "gogoproto/gogo.proto";
import "stakebird/stake/v1beta1/stake.proto";
import "google/api/annotations.proto";

option go_package = "github.com/public-awesome/stakebird/x/stake/types";

// Query defines the gRPC querier service.
service Query {
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/stakebird/stake/v1beta1/params";
  }

  rpc Posts(QueryPostsRequest) returns (QueryPostsResponse) {
    option (google.api.http).get =
        "/stakebird/stake/v1beta1/posts/{vendor_id}";
  }

  rpc Post(QueryPostRequest) returns (QueryPostResponse) {
    option (google.api.http).get =
        "/stakebird/stake/v1beta1/posts/{vendor_id}/{post_id}";
  }

}

message QueryParamsRequest {}

message QueryParamsResponse {
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryPostsRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  uint32 vendor_id = 1;
}

message QueryPostRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  uint32 vendor_id = 1;
  string post_id = 2;
}

message QueryPostsResponse { 
  repeated stakebird.stake.v1beta1.Post posts = 1 [(gogoproto.nullable) = false]; 
}

message QueryPostResponse { stakebird.stake.v1beta1.Post post = 1; }
